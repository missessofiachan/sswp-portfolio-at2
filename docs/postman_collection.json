{
  "info": {
    "name": "SSWP AT2 API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": "Auth + Products CRUD + Admin (stats, users) with tests"
  },
  "variable": [
    { "key": "baseUrl", "value": "http://localhost:4000/api/v1" },
    { "key": "token", "value": "" },
    { "key": "productId", "value": "" },
    { "key": "adminEmail", "value": "admin@example.com" },
    { "key": "adminPassword", "value": "password123" },
    { "key": "userIdToDelete", "value": "" },
    { "key": "userEmail", "value": "" }
  ],
  "item": [
    {
      "name": "Auth",
      "item": [
        {
          "name": "Register Admin (first becomes admin)",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{adminEmail}}\",\n  \"password\": \"{{adminPassword}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('status 201', function () { pm.response.to.have.status(201); });",
                  "const json = pm.response.json();",
                  "pm.expect(json).to.have.property('data');",
                  "pm.expect(json.data).to.have.property('id');",
                  "pm.expect(json.data).to.have.property('email');"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Login (admin)",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{adminEmail}}\",\n  \"password\": \"{{adminPassword}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('status 200', function () { pm.response.to.have.status(200); });",
                  "const json = pm.response.json();",
                  "pm.expect(json).to.have.property('data');",
                  "pm.expect(json.data).to.have.property('token');",
                  "pm.expect(json.data).to.have.property('user');",
                  "pm.collectionVariables.set('token', json.data.token);"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Register Regular User (to delete)",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user+{{$timestamp}}@example.com\",\n  \"password\": \"password123\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('status 201', function () { pm.response.to.have.status(201); });",
                  "const json = pm.response.json();",
                  "pm.collectionVariables.set('userIdToDelete', json.data.id);",
                  "pm.collectionVariables.set('userEmail', json.data.email);"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Admin",
      "item": [
        {
          "name": "List Users (admin)",
          "request": {
            "method": "GET",
            "header": [{ "key": "Authorization", "value": "Bearer {{token}}" }],
            "url": {
              "raw": "{{baseUrl}}/admin/users",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "users"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('status 200', function () { pm.response.to.have.status(200); });",
                  "const json = pm.response.json();",
                  "pm.expect(json).to.have.property('data');",
                  "pm.expect(json.data).to.be.an('array');",
                  "pm.expect(json.data.some(u => u.email === pm.collectionVariables.get('userEmail'))).to.be.true;"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Delete User by ID (admin)",
          "request": {
            "method": "DELETE",
            "header": [{ "key": "Authorization", "value": "Bearer {{token}}" }],
            "url": {
              "raw": "{{baseUrl}}/admin/users/{{userIdToDelete}}",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "users", "{{userIdToDelete}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('status 204', function () { pm.response.to.have.status(204); });"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Products",
      "item": [
        {
          "name": "List Products",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["products"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('status 200', function () { pm.response.to.have.status(200); });",
                  "const json = pm.response.json();",
                  "pm.expect(json).to.have.property('data');",
                  "pm.expect(Array.isArray(json.data)).to.be.true;"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create (auth)",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" },
              { "key": "Authorization", "value": "Bearer {{token}}" }
            ],
            "url": {
              "raw": "{{baseUrl}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["products"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Product {{$timestamp}}\",\n  \"price\": 49.99,\n  \"description\": \"Postman created\",\n  \"category\": \"test\",\n  \"rating\": 4.2,\n  \"images\": []\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('status 201', function () { pm.response.to.have.status(201); });",
                  "const json = pm.response.json();",
                  "pm.expect(json).to.have.property('data');",
                  "pm.collectionVariables.set('productId', json.data.id);"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get by ID",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/products/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["products", "{{productId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('status 200', function () { pm.response.to.have.status(200); });",
                  "const json = pm.response.json();",
                  "pm.expect(json.data.id).to.eql(pm.collectionVariables.get('productId'));"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update (auth)",
          "request": {
            "method": "PUT",
            "header": [
              { "key": "Content-Type", "value": "application/json" },
              { "key": "Authorization", "value": "Bearer {{token}}" }
            ],
            "url": {
              "raw": "{{baseUrl}}/products/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["products", "{{productId}}"]
            },
            "body": { "mode": "raw", "raw": "{\n  \"price\": 59.99\n}" }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('status 200', function () { pm.response.to.have.status(200); });",
                  "const json = pm.response.json();",
                  "pm.expect(json).to.have.property('data');",
                  "pm.expect(json.data.price).to.eql(59.99);"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Admin Stats",
          "request": {
            "method": "GET",
            "header": [{ "key": "Authorization", "value": "Bearer {{token}}" }],
            "url": {
              "raw": "{{baseUrl}}/products/admin/stats",
              "host": ["{{baseUrl}}"],
              "path": ["products", "admin", "stats"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('status 200', function () { pm.response.to.have.status(200); });",
                  "const json = pm.response.json();",
                  "pm.expect(json).to.have.property('data');",
                  "pm.expect(json.data).to.have.property('count');",
                  "pm.expect(json.data).to.have.property('avgPrice');"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Delete Product (admin)",
          "request": {
            "method": "DELETE",
            "header": [{ "key": "Authorization", "value": "Bearer {{token}}" }],
            "url": {
              "raw": "{{baseUrl}}/products/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["products", "{{productId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('status 204', function () { pm.response.to.have.status(204); });"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Unauthorized (expect 401)",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "url": {
              "raw": "{{baseUrl}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["products"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Unauth Product\",\n  \"price\": 10,\n  \"category\": \"test\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('status 401', function () { pm.response.to.have.status(401); });"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Admin Users Unauthorized (expect 401)",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/admin/users",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "users"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('status 401', function () { pm.response.to.have.status(401); });"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    }
  ]
}
